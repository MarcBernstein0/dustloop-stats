import { pgTable, serial, varchar, timestamp, json } from "drizzle-orm/pg-core";

export const characters = pgTable("characters", {
  id: serial("id").primaryKey(),
  name: varchar("name").notNull(),
  slug: varchar("slug").notNull(),
  displayName: varchar("display_name").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
});

export const systemCoreData = pgTable("system_core_data", {
  id: serial("id").primaryKey(),
  character: varchar("character").notNull(),
  tableName: varchar("table_name").notNull(),
  tableType: varchar("table_type").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
  defense: varchar("defense"),
  guts: varchar("guts"),
  riscGainModifier: varchar("risc_gain_modifier"),
  prejump: varchar("prejump"),
  backdashDuration: varchar("backdash_duration"),
  backdashInvuln: varchar("backdash_invuln"),
  backdashAirborne: varchar("backdash_airborne"),
  forwardDash: varchar("forward_dash"),
  uniqueMovementOptions: varchar("unique_movement_options"),
  movementTensionGain: varchar("movement_tension_gain"),
});

export const systemJumpData = pgTable("system_jump_data", {
  id: serial("id").primaryKey(),
  character: varchar("character").notNull(),
  tableName: varchar("table_name").notNull(),
  tableType: varchar("table_type").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
  jumpDuration: varchar("jump_duration"),
  highJumpDuration: varchar("high_jump_duration"),
  jumpHeight: varchar("jump_height"),
  highJumpHeight: varchar("high_jump_height"),
  preInstantAirDash: varchar("pre_instant_air_dash"),
  airDashDuration: varchar("air_dash_duration"),
  airBackdashDuration: varchar("air_backdash_duration"),
  airDashDistance: varchar("air_dash_distance"),
  airBackdashDistance: varchar("air_backdash_distance"),
  jumpingTensionGain: varchar("jumping_tension_gain"),
  airDashTensionGain: varchar("air_dash_tension_gain"),
});

export const gatlingTables = pgTable("gatling_tables", {
  id: serial("id").primaryKey(),
  character: varchar("character").notNull(),
  tableName: varchar("table_name").notNull(),
  tableType: varchar("table_type").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
  pMoves: json("p_moves").$type<string[]>(),
  kMoves: json("k_moves").$type<string[]>(),
  sMoves: json("s_moves").$type<string[]>(),
  hMoves: json("h_moves").$type<string[]>(),
  dMoves: json("d_moves").$type<string[]>(),
  cancelOptions: json("cancel_options").$type<string[]>(),
});

export const normalMoves = pgTable("normal_moves", {
  id: serial("id").primaryKey(),
  character: varchar("character").notNull(),
  tableName: varchar("table_name").notNull(),
  tableType: varchar("table_type").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
  input: varchar("input").notNull(),
  damage: varchar("damage"),
  guard: varchar("guard"),
  startup: varchar("startup"),
  active: varchar("active"),
  recovery: varchar("recovery"),
  onBlock: varchar("on_block"),
  onHit: varchar("on_hit"),
  level: varchar("level"),
  counterType: varchar("counter_type"),
  invuln: varchar("invuln"),
  proration: varchar("proration"),
  riscGain: varchar("risc_gain"),
  riscLoss: varchar("risc_loss"),
  notes: varchar("notes"),
});

export const specialMoves = pgTable("special_moves", {
  id: serial("id").primaryKey(),
  character: varchar("character").notNull(),
  tableName: varchar("table_name").notNull(),
  tableType: varchar("table_type").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
  name: varchar("name").notNull(),
  input: varchar("input").notNull(),
  damage: varchar("damage"),
  guard: varchar("guard"),
  startup: varchar("startup"),
  active: varchar("active"),
  recovery: varchar("recovery"),
  onBlock: varchar("on_block"),
  onHit: varchar("on_hit"),
  level: varchar("level"),
  counterType: varchar("counter_type"),
  invuln: varchar("invuln"),
  proration: varchar("proration"),
  riscGain: varchar("risc_gain"),
  riscLoss: varchar("risc_loss"),
  notes: varchar("notes"),
});

export const overdriveMoves = pgTable("overdrive_moves", {
  id: serial("id").primaryKey(),
  character: varchar("character").notNull(),
  tableName: varchar("table_name").notNull(),
  tableType: varchar("table_type").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
  name: varchar("name").notNull(),
  input: varchar("input").notNull(),
  damage: varchar("damage"),
  guard: varchar("guard"),
  startup: varchar("startup"),
  active: varchar("active"),
  recovery: varchar("recovery"),
  onBlock: varchar("on_block"),
  onHit: varchar("on_hit"),
  level: varchar("level"),
  counterType: varchar("counter_type"),
  invuln: varchar("invuln"),
  proration: varchar("proration"),
  riscGain: varchar("risc_gain"),
  riscLoss: varchar("risc_loss"),
  notes: varchar("notes"),
});

export const characterSpecificTables = pgTable("character_specific_tables", {
  id: serial("id").primaryKey(),
  character: varchar("character").notNull(),
  tableName: varchar("table_name").notNull(),
  tableType: varchar("table_type").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
  headers: json("headers").$type<string[]>(),
  rows: json("rows").$type<Record<string, unknown>[]>(),
});
